			+---------------------------+
			|	      CS 330			|
			| PROJECT 3: VIRTUAL MEMORY	|
			|	   DESIGN DOCUMENT		|
			+---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

PJ3-2
AhnDonghyun segaukwa@kaist.ac.kr
HamDonghoon hdh8277@kaist.ac.kr

Use 0 tokens

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

page.h

  6 enum page_status{IN_MEMORY,IN_SWAP,FROM_FILE,STACK_GROWTH};
  7
  8 struct suppl_pte{
  9
 10   void *upage;              /* user page address */
 11   void *kpage;              /* kernel page address. only effective when stat    us = IN_MEMORY */
 12   enum page_status status;  /* page's status */
 13
 14   /* IN_SWAP */
 15   uint32_t swap_index;      /* when page is swapped, it indicates swap index    . initially -1. */
 16
 17   /* FROM_FILE */
 18   struct file * file;
 19   bool writable;            /* false : read-only page */
 20   uint32_t offset;          /* offset of file */
 21   size_t read_bytes;        /* bytes to read from executables */
 22
 23   struct hash_elem helem;    /* hash elem for hash mapping */
 24   struct frame_table_entry * fte /*associated fte */
 25 };

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

for pages, bunch of setup spte functions, and also some spte free-ing functions.
also load_page for lazy loading was neccessary.

for swap, swap_in and swap_out was main functions, and others managing locks

for frame, it gives frame table, which is the list of frame entry. frame entry matches physical memory to 
virtual memory. There are frame allocation 

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

we don't use dirty bit. we used bool flag rather than using dirty bit. 

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

use a frame lock, only one process can allocate the frame at one time.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

In order to find frame table entry from supplementary page table entry,
we put fte structure in spte structure. Also, spte should have parameters
such as status(to know about page's status when load), file informations.

Also, frame table entry has special parameter 'busy' for synchronization.
When busy is true, this frame can not be evicted.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

frame.h

 11 struct frame_table_entry{
 12
 13   struct thread * holder;   /* holder thread */
 14
 15   void * fpage;             /* frame page address */
 16   void * upage;             /* user page address */
 17
 18   struct list_elem elem;    /* elem for frame table : list */
 19   bool swap;            /* boolean for swap */
 20
 21   bool setup;           /* setup stack */
 22 };

frame.c

 14 static struct list frame_table; /* frame table. */
 15 static struct lock frame_lock; /* for synchronization of managing frame table */

struct suppl_pte{

  void *upage;              /* user page address */
  void *kpage;              /* kernel page address. only effective when status = IN_MEMORY */
  enum page_status status;  /* page's status */
  
  /* IN_SWAP */
  uint32_t swap_index;      /* when page is swapped, it indicates swap index. initially -1. */
  
  /* FROM_FILE */
  struct file * file;    
  bool writable;            /* false : read-only page */
  uint32_t offset;          /* offset of file */
  size_t read_bytes;        /* bytes to read from executables */

  struct hash_elem helem;    /* hash elem for hash mapping */
  struct frame_table_entry * fte /*associated fte */
};


---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

 void
 84 frame_evict(){
 85
 86   lock_acquire(&frame_lock);
 87   void * new_frame;
 88   struct list_elem * e = list_begin(&frame_table);
 89   struct frame_table_entry * victim = list_entry(e, struct frame_table_entry    , elem);
 90
 91   /* second chance algorithm */
 92
 93
 94   while ((victim->busy) && (victim->fpage == NULL || pagedir_is_accessed(victim->holder->paged    ir, victim->upage))){
 95
 96     if(victim->fpage != NULL)
 97       pagedir_set_accessed(victim->holder->pagedir, victim->upage, false);
 98     list_remove(e);
 99     list_push_back(&frame_table, e);
100     e = list_begin(&frame_table);
101     victim = list_entry(e, struct frame_table_entry , elem);
102   }
103   //printf("victim : %p\n", victim->upage);
104   list_remove(&victim->elem);
105   swap_out(victim);
106   free(victim);
107   lock_release(&frame_lock);
108 }
109
~
In a while loop, check that frame is accessed or not. If not accessed or NULL and not busy, then evict it.
if it is accessed frame, make its accessed bit as false.(second chance algorithm) 

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

When P use the frame that used by a Q, It means the frame is swapped.
Then it removes from frame table and swap parameter become true.
Also, spte of Q should change its status as IN_SWAP for swap_in.  

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

When page fault occurs, if spte is NULL and its address range is valid,
The stack should be extended.


---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

There are two variables which responsible for synchronization.
one is frame lock, other is busy parameter.
frame lock manage the synch of frame allocation between processes.
busy parameter controls eviction. When frame is allocated, that frame must not be evicted.
    
>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?


>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

When read or write system call called, buffer page should not be swapped.
To do this, we use busy parameter. Each frame table entry has busy bit, and
it turns on when read or write systemcall called.
 
 
>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

Above answer can be a solution of this question.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We made many locks for solve synchronization problem, but in fact just use one lock, frame lock
And other synchronization problem can be handled by one boolean parameter, busy.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct mmap_descriptor
{
  mapid_t id; 			// id for memory mapped file
  struct list_elem elem;	// list elem for mmap_list in thread
  struct file* file;		// file info of memory mapped file

  void *addr;			// user address where file is mapped
  size_t size;			// file size
};

struct thread{

  struct list mmap_list;	// list for mmap_descriptor

}


---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

When mmap is called, find file from fd and open it.
According to file size, allocate frame and make supplementary page table entry for it.
Then make mmap_descriptor, which contains memory mapped file info and insert it to the mmap_list
When memory mapped file is unmapped, check dirty bits.
If it is dirty, it means something write on file.
So, write back to original file to reflect change.


>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

We determine whether a new file mapping overlaps an existing segment
by checking if there is an existing mapping in page directory.


---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.
we implement it separately, since we are not cleaver as well as you thnk. 
Moreover, we were forced to improve the synchronization problems. 
The suggestion seems  to demand more locks to synchronize, 
so we were not gonna merge those structures.


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?
It was the most hardest project compare to project 1,2.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
